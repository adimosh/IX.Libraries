<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\..\Common\Templates\StandardTypes.tt" #><#@ include file="..\..\Common\Templates\TypeNamesFixture.tt" #>
<#@ output extension=".cs" #>
using System.Diagnostics.CodeAnalysis;

namespace IX.Core.Collections;

/// <summary>
///     Extensions for IList.
/// </summary>
[SuppressMessage(
    "ReSharper",
    "InconsistentNaming",
    Justification = "These are extensions for IList, so we must allow this.")]
public static partial class IListCloneExtensions
{<#
List<string> code = new List<string>();

foreach (var typ in types.Where(p => p != typeof(byte[])))
{
    string fullTypeName = GetTypeUsableName(typ);
#>

    /// <summary>
    ///     Deep clones the list.
    /// </summary>
    /// <param name="list">The list to clone.</param>
    /// <returns>
    ///     A cloned list.
    /// </returns>
    /// <exception cref="ArgumentNullException"><paramref name="list"/> is <see langword="null"/> (<see langword="Nothing"/> in Visual Basic).</exception>
    public static List<<#= fullTypeName #>> DeepClone(this List<<#= fullTypeName #>> list)
    {
        var localList = Requires.NotNull(list);

        return new List<<#= fullTypeName #>>(localList);
    }
<#
}
#>
}