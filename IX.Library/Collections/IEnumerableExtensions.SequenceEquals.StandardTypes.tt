<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\..\Common\Templates\StandardTypes.tt" #><#@ include file="..\..\Common\Templates\TypeNamesFixture.tt" #>
<#@ output extension=".cs" #>
using System.Diagnostics.CodeAnalysis;

namespace IX.Library.Collections;

/// <summary>
/// Extensions for IEnumerable.
/// </summary>
[SuppressMessage(
    "ReSharper",
    "InconsistentNaming",
    Justification = "These are extensions for IEnumerable, so we must allow this.")]
public static partial class IEnumerableExtensions
{<#
List<string> code = new List<string>();

foreach (var typ in types.Where(p => p != typeof(byte[])))
{
    string fullTypeName = GetTypeUsableName(typ);
#>

    /// <summary>
    /// Determines whether two enumerable objects have all members in sequence equal to one another.
    /// </summary>
    /// <param name="left">The left operand enumerable.</param>
    /// <param name="right">The right operand enumerable.</param>
    /// <returns><see langword="true"/> if the two enumerable objects have the same length and each element at each position
    /// in one enumerable is equal to the equivalent in the other, <see langword="false"/> otherwise.</returns>
    public static bool SequenceEquals(this IEnumerable<<#= fullTypeName #>>? left, IEnumerable<<#= fullTypeName #>>? right)
    {
        if (left == null)
        {
            return right == null;
        }

        if (right == null)
        {
            return false;
        }

        using IEnumerator<<#= fullTypeName #>> e1 = left.GetEnumerator();
        using IEnumerator<<#= fullTypeName #>> e2 = right.GetEnumerator();

        while (true)
        {
            var b1 = e1.MoveNext();
            var b2 = e2.MoveNext();

            if (b1 != b2)
            {
                return false;
            }

            if (b1)
            {
                if (e1.Current != e2.Current)
                {
                    return false;
                }
            }
            else
            {
                return true;
            }
        }
    }
<#
}
#>
}