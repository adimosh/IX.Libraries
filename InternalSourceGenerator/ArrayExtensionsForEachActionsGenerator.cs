using Microsoft.CodeAnalysis;

using System;
using System.Text;

namespace InternalSourceGenerator;

[Generator]
public class ArrayExtensionsForEachActionsGenerator : ISourceGenerator
{
    /// <summary>
    /// Called before generation occurs. A generator can use the <paramref name="context" />
    /// to register callbacks required to perform generation.
    /// </summary>
    /// <param name="context">The <see cref="T:Microsoft.CodeAnalysis.GeneratorInitializationContext" /> to register callbacks on</param>
    public void Initialize(GeneratorInitializationContext context) { }

    /// <summary>
    /// Called to perform source generation. A generator can use the <paramref name="context" />
    /// to add source files via the <see cref="M:Microsoft.CodeAnalysis.GeneratorExecutionContext.AddSource(System.String,Microsoft.CodeAnalysis.Text.SourceText)" />
    /// method.
    /// </summary>
    /// <param name="context">The <see cref="T:Microsoft.CodeAnalysis.GeneratorExecutionContext" /> to add source to</param>
    /// <remarks>
    /// This call represents the main generation step. It is called after a <see cref="T:Microsoft.CodeAnalysis.Compilation" /> is
    /// created that contains the user written code.
    /// A generator can use the <see cref="P:Microsoft.CodeAnalysis.GeneratorExecutionContext.Compilation" /> property to
    /// discover information about the users compilation and make decisions on what source to
    /// provide.
    /// </remarks>
    public void Execute(GeneratorExecutionContext context)
    {
        const string baseNamespace = "IX.Library";
        const string collectionsNamespace = $"{baseNamespace}.Collections";
        const string arrayExtensionsClassName = "ArrayExtensions";

        // Start building up for ArrayExtensions
        StringBuilder arrayExtensionsStringBuilder = new();
        arrayExtensionsStringBuilder.AppendLine("// <auto-generated/>");
        arrayExtensionsStringBuilder.AppendLine("using System.Diagnostics.CodeAnalysis;");
        arrayExtensionsStringBuilder.AppendLine();
        arrayExtensionsStringBuilder.AppendLine($"namespace {collectionsNamespace};");
        arrayExtensionsStringBuilder.AppendLine();
        arrayExtensionsStringBuilder.AppendLine($"public static partial class {arrayExtensionsClassName}");
        arrayExtensionsStringBuilder.AppendLine("{");

        // Build up source for ArrayExtensions.ForEachActions

        // Build up source for ArrayExtensions.ForEachRefActions

        // Build up source for ArrayExtensions.SequenceCompare.StandardTypes

        // Build up source for ArrayExtensions.SequenceEquals.StandardTypes

        // Build up source for ArrayExtensions.StandardTypes

        // End building for ArrayExtensions
        arrayExtensionsStringBuilder.AppendLine("}");

        context.AddSource("ArrayExtensions.g.cs", arrayExtensionsStringBuilder.ToString());
    }
}
